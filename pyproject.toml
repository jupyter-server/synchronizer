[build-system]
requires = ["hatchling>=1.5"]
build-backend = "hatchling.build"

[project]
name = "jupyter_server_synchronizer"
dynamic = ["version"]
readme = "README.md"
license = { file = "COPYING.md" }
description = "A Jupyter Server Session Manager that rehydrates and synchronizes Jupyter sessions (e.g. notebook-kernel connections)."
keywords = ["ipython", "jupyter"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Framework :: Jupyter",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
]
requires-python = ">=3.8"
dependencies = ["jupyter_server>=1.21.0"]

[[project.authors]]
name = "Jupyter Development Team"
email = "jupyter@googlegroups.com"

[project.urls]
Homepage = "https://jupyter-server-synchronizer.readthedocs.io"
Documentation = "https://jupyter-server-synchronizer.readthedocs.io"
Funding = "https://numfocus.org/donate"
Source = "https://github.com/jupyter-server/synchronizer"
Tracker = "https://github.com/jupyter-server/synchronizer/issues"

[project.optional-dependencies]
test = [
  "pre-commit",
  "pytest-timeout",
  "pytest-jupyter[server]>=0.4.1",
  "pytest>=7.0",
]

[tool.hatch.version]
path = "jupyter_server_synchronizer/_version.py"
validate-bump = false

[tool.hatch.envs.test]
features = ["test"]
[tool.hatch.envs.test.scripts]
test = "python -m pytest -vv {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.cov]
features = ["test"]
dependencies = ["coverage[toml]", "pytest-cov"]
[tool.hatch.envs.cov.scripts]
test = "python -m pytest -vv --cov jupyter_server_synchronizer --cov-branch --cov-report term-missing:skip-covered {args}"
nowarn = "test -W default {args}"

[tool.hatch.envs.typing]
detached = true
dependencies = ["pre-commit"]
[tool.hatch.envs.typing.scripts]
test = "pre-commit run --all-files --hook-stage manual mypy"

[tool.hatch.envs.lint]
dependencies = [
  "pre-commit"
]
detached = true
[tool.hatch.envs.lint.scripts]
build = [
  "pre-commit run --all-files ruff",
  "pre-commit run --all-files ruff-format"
]

[tool.jupyter-releaser.options]
post-version-spec = "dev"

[tool.pytest.ini_options]
minversion = "6.0"
xfail_strict = true
log_cli_level = "info"
addopts = [
  "-raXs", "--durations=10", "--color=yes", "--doctest-modules",
   "--showlocals", "--strict-markers", "--strict-config"
]
testpaths = ["tests"]
filterwarnings= [
  # Fail on warnings
  "error",
  "module:datetime.datetime.utc:DeprecationWarning",
  # pyyaml on pypi
  "module:can't resolve package from __spec__:ImportWarning",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\bProtocol\\):",
"@(abc\\.)?abstractmethod",
]

[tool.coverage.run]
relative_files = true
source = ["jupyter_server_synchronizer"]

[tool.mypy]
files = "jupyter_server_synchronizer"
python_version = "3.8"
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true

[tool.ruff]
line-length = 100

[tool.ruff.lint]
extend-select = [
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PTH",         # flake8-use-pathlib
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
  "PYI",         # flake8-pyi
  "S",           # flake8-bandit
]
ignore = [
  "PLR",    # Design related pylint codes
]
unfixable = [
  # Don't touch print statements
  "T201",
  # Don't touch noqa lines
  "RUF100",
]

[tool.ruff.lint.per-file-ignores]
# S101 Use of `assert` detected
# PT011 `pytest.raises(ValueError)` is too broad
"tests/*" = ["S101", "PT011", "ARG"]

[tool.interrogate]
ignore-init-module=true
ignore-private=true
ignore-semiprivate=true
ignore-property-decorators=true
ignore-nested-functions=true
ignore-nested-classes=true
fail-under=100
exclude = ["tests"]

[tool.repo-review]
ignore = ["PY004", "PY007","PP301", "PP308", "GH102", "RTD100"]
